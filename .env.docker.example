# Docker Environment Configuration Example
# Copy this file to .env.docker and customize for your Docker deployment

# ============================================================================
# Application Settings
# ============================================================================
PROJECT_NAME=FastAPI Bee
VERSION=0.1.0
API_V1_STR=/api/v1

# ============================================================================
# Environment Configuration
# ============================================================================
# Options: development, production
ENVIRONMENT=production

# ============================================================================
# Logging Configuration
# ============================================================================
# Options: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# ============================================================================
# CORS Configuration
# ============================================================================
# Add your frontend URLs here (JSON array format)
# Example: ["http://localhost:3000","https://example.com"]
ALLOWED_ORIGINS=["http://localhost:3000","http://localhost:8000"]

# ============================================================================
# Server Configuration (Optional)
# ============================================================================
# HOST=0.0.0.0
# PORT=8000
# WORKERS=4

# ============================================================================
# Database Configuration (Uncomment when needed)
# ============================================================================
# SQLite (for development/testing)
# DATABASE_URL=sqlite:///./app.db

# PostgreSQL (recommended for production)
# DATABASE_URL=postgresql://user:password@db:5432/fastapi_bee

# MySQL
# DATABASE_URL=mysql://user:password@db:3306/fastapi_bee

# ============================================================================
# Security Configuration (Uncomment when needed)
# ============================================================================
# SECRET_KEY=your-super-secret-key-change-this-in-production
# ALGORITHM=HS256
# ACCESS_TOKEN_EXPIRE_MINUTES=30

# ============================================================================
# Redis Configuration (Uncomment when needed)
# ============================================================================
# REDIS_URL=redis://redis:6379/0

# ============================================================================
# Email Configuration (Uncomment when needed)
# ============================================================================
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# EMAILS_FROM_EMAIL=noreply@example.com

# ============================================================================
# External Services (Uncomment when needed)
# ============================================================================
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# AWS_REGION=us-east-1
# S3_BUCKET=your-bucket-name

# ============================================================================
# Monitoring & Observability (Uncomment when needed)
# ============================================================================
# SENTRY_DSN=https://your-sentry-dsn
# DATADOG_API_KEY=your-datadog-api-key

# ============================================================================
# Feature Flags (Uncomment when needed)
# ============================================================================
# ENABLE_SWAGGER_UI=true
# ENABLE_REDOC=true
# ENABLE_RATE_LIMITING=true

# ============================================================================
# Notes:
# ============================================================================
# 1. Never commit this file with real secrets to version control
# 2. Use Docker secrets or environment variables for sensitive data in production
# 3. Update ALLOWED_ORIGINS with your actual frontend URLs
# 4. Generate a strong SECRET_KEY for production: openssl rand -hex 32
# 5. Use strong database passwords in production
# 6. Consider using a secrets management service (AWS Secrets Manager, HashiCorp Vault, etc.)

